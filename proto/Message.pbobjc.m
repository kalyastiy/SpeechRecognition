// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Message.pbobjc.h"
#import "Voice.pbobjc.h"
#import "Text.pbobjc.h"
#import "SystemMessage.pbobjc.h"
#import "Device.pbobjc.h"
#import "Settings.pbobjc.h"
#import "Status.pbobjc.h"


// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"


#pragma mark - GPBGenMessageRoot

@implementation GPBGenMessageRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - GPBGenMessageRoot_FileDescriptor

static GPBFileDescriptor *GPBGenMessageRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"proto"
                                                 objcPrefix:@"GPBGen"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - GPBGenMessage

@implementation GPBGenMessage

@dynamic contentOneOfCase;
@dynamic userId;
@dynamic userChannel;
@dynamic messageName;
@dynamic messageId;
@dynamic last;
@dynamic token;
@dynamic voice;
@dynamic text;
@dynamic systemMessage;
@dynamic device;
@dynamic settings;
@dynamic status;
@dynamic ttsEngine;
@dynamic sttEngine;


typedef struct GPBGenMessage__storage_ {
  uint32_t _has_storage_[2];
  int32_t last;
  NSString *userId;
  NSString *token;
  GPBGenVoice *voice;
  GPBGenText *text;
  GPBGenSystemMessage *systemMessage;
  GPBGenDevice *device;
  GPBGenSettings *settings;
  GPBGenStatus *status;
  NSString *userChannel;
  NSString *ttsEngine;
  NSString *sttEngine;
  NSString *messageName;
  int64_t messageId;
} GPBGenMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = GPBGenMessage_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GPBGenMessage__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "messageId",
        .dataTypeSpecific.className = NULL,
        .number = GPBGenMessage_FieldNumber_MessageId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GPBGenMessage__storage_, messageId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "last",
        .dataTypeSpecific.className = NULL,
        .number = GPBGenMessage_FieldNumber_Last,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GPBGenMessage__storage_, last),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "token",
        .dataTypeSpecific.className = NULL,
        .number = GPBGenMessage_FieldNumber_Token,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GPBGenMessage__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "voice",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBGenVoice),
        .number = GPBGenMessage_FieldNumber_Voice,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(GPBGenMessage__storage_, voice),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "text",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBGenText),
        .number = GPBGenMessage_FieldNumber_Text,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(GPBGenMessage__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "systemMessage",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBGenSystemMessage),
        .number = GPBGenMessage_FieldNumber_SystemMessage,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(GPBGenMessage__storage_, systemMessage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "device",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBGenDevice),
        .number = GPBGenMessage_FieldNumber_Device,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(GPBGenMessage__storage_, device),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "settings",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBGenSettings),
        .number = GPBGenMessage_FieldNumber_Settings,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(GPBGenMessage__storage_, settings),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBGenStatus),
        .number = GPBGenMessage_FieldNumber_Status,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(GPBGenMessage__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userChannel",
        .dataTypeSpecific.className = NULL,
        .number = GPBGenMessage_FieldNumber_UserChannel,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GPBGenMessage__storage_, userChannel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ttsEngine",
        .dataTypeSpecific.className = NULL,
        .number = GPBGenMessage_FieldNumber_TtsEngine,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GPBGenMessage__storage_, ttsEngine),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sttEngine",
        .dataTypeSpecific.className = NULL,
        .number = GPBGenMessage_FieldNumber_SttEngine,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(GPBGenMessage__storage_, sttEngine),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "messageName",
        .dataTypeSpecific.className = NULL,
        .number = GPBGenMessage_FieldNumber_MessageName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GPBGenMessage__storage_, messageName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },



    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GPBGenMessage class]
                                     rootClass:[GPBGenMessageRoot class]
                                          file:GPBGenMessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GPBGenMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
      static const char *oneofs[] = {
        "content"
      };
      [localDescriptor setupOneofs:oneofs count:(uint32_t)(sizeof(oneofs) / sizeof(char*)) firstHasIndex:-1];
      
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void GPBGenMessage_ClearContentOneOfCase(GPBGenMessage *message) {
    GPBDescriptor *descripter = [message descriptor];
    GPBOneofDescriptor *oneOf = [descripter.oneofs objectAtIndex:0];
    GPBMaybeClearOneof(message, oneOf, -1, 0);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
