//
//  Created by Daniil Kalintsev on 25/10/2019.
//  Copyright © 2019 Sberbank. All rights reserved.
//

import Foundation

/// Обработчик событий с AudioQueue.
protocol AudioQueueDelegate: AnyObject {

	/// Событие, уведомляющее о том, что буффер был только что добавлен в очередь,
	/// либо был только что проигран, и требует следующего набора данных для проигрывания.
	/// - Important: В данном методе обязательно необходимо осуществить повторное
	///				 добавление буффера в аудио очередь. Иначе проигрывание не будет работать корректно.
	///
	/// - Parameters:
	///   - queue: Очередь, которая инициирует событие.
	///   - buffer: Буффер, требующий новых данных.
	func audioQueue(
		_ queue: AudioQueue,
		didEnqeueBuffer buffer: AudioBuffer
	)
}

/// Объект воспроизведения аудиоданных с использованием двойной буфферизации.
/// - Note: Механизм двойной буфферизации работает следующим образом:
/// 		- Создаются два и более буфферов для данных.
///			- Запускается проигрывание одного буффера.
///			- Второй буффер в это время начинает наполняться данными.
///			- После проигрывания первого буффера, сразу же запускается второй,
///			  который к тому моменту уже подготовлен к воспроизвдению.
///			- Процесс продолжается до тех пор, пока есть аудиоданные для воспроизведения.
protocol AudioQueue {

	// MARK: - Properties

	var delegate: AudioQueueDelegate? { get set }

	// MARK: - Methods

	/// Создание новго буффера в данной очереди заданного размера.
	///
	/// - Parameter size: Размер буффера.
	/// - Returns: Проинициализированный пустой буффер.
	/// - Throws: Ошибки инициализации буффера на заданной AudioQueue.
	func buffer(size: Int) throws -> AudioBuffer

	/// Запуск воспроизведения.
	///
	/// - Throws: Возможные ошибки запуска AudioQueue.
	func start() throws

	/// Приостановка воспроизведения.
	///
	/// - Throws: Возможные ошибки приостановки AudioQueue.
	func pause() throws

	/// Остановка воспроизведения.
	///
	/// - Throws: Возможные ошибки остановки AudioQueue.
	func stop() throws

	/// Добавление буффера в очередь, чтобы далее заполнять его данными.
	///
	/// - Parameter buffer: Буффер для добавления в очередь.
	/// - Throws: Ошибки добавления буффера в очередь.
	func enqueue(buffer: AudioBuffer) throws
}
